const path = require('path');

/**
 * Get language identifier for markdown code blocks based on file extension
 * @param {string} extension - File extension
 * @returns {string}
 */
function getLanguageIdentifier(extension) {
  const languageMap = {
    '.js': 'javascript',
    '.jsx': 'jsx',
    '.ts': 'typescript',
    '.tsx': 'tsx',
    '.py': 'python',
    '.java': 'java',
    '.cpp': 'cpp',
    '.c': 'c',
    '.h': 'c',
    '.hpp': 'cpp',
    '.cs': 'csharp',
    '.go': 'go',
    '.rs': 'rust',
    '.rb': 'ruby',
    '.php': 'php',
    '.swift': 'swift',
    '.kt': 'kotlin',
    '.scala': 'scala',
    '.sh': 'bash',
    '.bash': 'bash',
    '.sql': 'sql',
    '.r': 'r',
    '.m': 'objectivec',
    '.mm': 'objectivec',
    '.dart': 'dart',
    '.vue': 'vue',
    '.svelte': 'svelte',
    '.html': 'html',
    '.css': 'css',
    '.scss': 'scss',
    '.json': 'json',
    '.xml': 'xml',
    '.yaml': 'yaml',
    '.yml': 'yaml',
    '.toml': 'toml',
    '.md': 'markdown',
    '.txt': 'text'
  };

  return languageMap[extension.toLowerCase()] || 'text';
}

/**
 * Format file size in human-readable format
 * @param {number} bytes - File size in bytes
 * @returns {string}
 */
function formatFileSize(bytes) {
  if (bytes < 1024) return bytes + ' B';
  if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(2) + ' KB';
  return (bytes / 1024 / 1024).toFixed(2) + ' MB';
}

/**
 * Generate markdown content for the code map
 * @param {Object} options - Generation options
 * @param {string} options.workingDir - Working directory path
 * @param {boolean} options.isProjectRoot - Whether the directory is a project root
 * @param {Array} options.files - Array of scanned files
 * @param {string|null} options.projectTree - Project tree structure
 * @returns {string}
 */
function generateMarkdown({ workingDir, isProjectRoot, files, projectTree }) {
  const projectName = path.basename(workingDir);
  const timestamp = new Date().toISOString();

  let markdown = '';

  // Header
  markdown += `# CodeMap: ${projectName}\n\n`;
  markdown += `> Generated on: ${timestamp}\n\n`;
  markdown += `**Total Files Scanned:** ${files.length}\n\n`;

  // Table of contents
  markdown += `## Table of Contents\n\n`;
  markdown += `- [Project Overview](#project-overview)\n`;
  if (projectTree) {
    markdown += `- [Project Structure](#project-structure)\n`;
  }
  markdown += `- [File Summary](#file-summary)\n`;
  markdown += `- [File Contents](#file-contents)\n\n`;

  markdown += `---\n\n`;

  // Project Overview
  markdown += `## Project Overview\n\n`;
  markdown += `**Directory:** \`${workingDir}\`\n\n`;
  markdown += `**Project Root:** ${isProjectRoot ? 'Yes' : 'No'}\n\n`;

  // Project Structure (if available)
  if (projectTree) {
    markdown += `---\n\n`;
    markdown += `## Project Structure\n\n`;
    markdown += '```\n';
    markdown += projectTree;
    markdown += '\n```\n\n';
  }

  markdown += `---\n\n`;

  // File Summary
  markdown += `## File Summary\n\n`;
  markdown += `| # | File Path | Type | Size |\n`;
  markdown += `|---|-----------|------|------|\n`;

  files.forEach((file, index) => {
    const fileType = getLanguageIdentifier(file.extension);
    const fileSize = formatFileSize(file.size);
    markdown += `| ${index + 1} | \`${file.relativePath}\` | ${fileType} | ${fileSize} |\n`;
  });

  markdown += `\n---\n\n`;

  // File Contents
  markdown += `## File Contents\n\n`;

  files.forEach((file, index) => {
    markdown += `### ${index + 1}. ${file.relativePath}\n\n`;
    markdown += `**Path:** \`${file.relativePath}\`\n\n`;
    markdown += `**Size:** ${formatFileSize(file.size)}\n\n`;

    const language = getLanguageIdentifier(file.extension);

    // Check if content is an error message
    if (file.content.startsWith('[')) {
      markdown += `${file.content}\n\n`;
    } else {
      markdown += '```' + language + '\n';
      markdown += file.content;
      // Ensure there's a newline before closing the code block
      if (!file.content.endsWith('\n')) {
        markdown += '\n';
      }
      markdown += '```\n\n';
    }

    markdown += `---\n\n`;
  });

  // Footer
  markdown += `## Generated by CodeMap\n\n`;
  markdown += `This document was automatically generated by [CodeMap](https://www.npmjs.com/package/codemap).\n`;

  return markdown;
}

module.exports = {
  generateMarkdown,
  getLanguageIdentifier,
  formatFileSize
};
